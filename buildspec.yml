# version: 0.2

# phases:
#   pre_build:
#     commands:
#       - echo Logging in to Docker Hub to avoid pull rate limits...
#       - echo "$DOCKERHUB_TOKEN" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
#       - echo Logging in to Amazon ECR...
#       - aws --version
#       - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI
#       - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
#   build:
#     commands:
#       - echo Build started on `date`
#       - echo Building the Docker image...
#       - docker build -t $REPOSITORY_URI:latest .
#       - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
#   post_build:
#     commands:
#       - echo Build completed on `date`
#       - echo Pushing the Docker images...
#       - docker push $REPOSITORY_URI:latest
#       - docker push $REPOSITORY_URI:$IMAGE_TAG
#       - echo Writing imagedefinitions.json...
#       - printf '[{"name":"%s","imageUri":"%s:%s"}]' "$SERVICE_NAME" "$REPOSITORY_URI" "$IMAGE_TAG" > imagedefinitions.json
# artifacts:
#   files:
#     - imagedefinitions.json


version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Docker Hub to avoid pull rate limits...
      - echo "$DOCKERHUB_TOKEN" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      - echo Logging in to Amazon ECR...
      - aws --version
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI
      - echo Determining image tag from commit ID...
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - echo "Image tag will be: $IMAGE_TAG"

  build:
    build:
    commands:
      - echo Building image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo Build completed on $(date)
      - echo Pushing the Docker images to ECR...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing imagedefinitions.json...
      # This must match the container name in your ECS Task Definition
      - printf '[{"name":"%s","imageUri":"%s:%s"}]' "$SERVICE_NAME" "$REPOSITORY_URI" "$IMAGE_TAG" > imagedefinitions.json
      - echo "Generated imagedefinitions.json:"
      - cat imagedefinitions.json
      # Validate JSON format (optional but recommended)
      - jq . imagedefinitions.json || { echo "Invalid imagedefinitions.json"; exit 1; }

artifacts:
  files:
    - imagedefinitions.json
